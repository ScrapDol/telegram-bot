import asyncio
import json
from datetime import datetime

from keyboards import reply

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram import F

BOT_TOKEN = "6034449668:AAESbVaUdZvhA1gvHbxzEbs8Sge4ih37Oj8"
# ADMINS = [1996601646]
ADMINS = [1996601646, 794115978]
QUESTIONNAIRE_FILE = "questionnaire.json"
ANSWERS_FILE = "answers.json"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


def is_admin(admin_id):
    if admin_id not in ADMINS:
        return False

    return True


def load_questionnaire():
    try:
        with open(QUESTIONNAIRE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return []


def save_questionnaire(questionnaire):
    with open(QUESTIONNAIRE_FILE, "w", encoding="utf-8") as f:
        json.dump(questionnaire, f, indent=2, ensure_ascii=False)


def load_answers():
    try:
        with open(ANSWERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return []


def save_answers(answers):
    with open(ANSWERS_FILE, "w", encoding="utf-8") as f:
        json.dump(answers, f, indent=2, ensure_ascii=False)


class Questionnaire(StatesGroup):
    answering = State()


class AdminActions(StatesGroup):
    adding_question = State()
    adding_options = State()
    editing_question = State()
    editing_options = State()


async def create_keyboard(buttons, row_width=2):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            buttons[i : i + row_width] for i in range(0, len(buttons), row_width)
        ]
    )


@dp.message(Command("start"))
async def cmd_start(message: types.Message):

    main_kb = ReplyKeyboardMarkup(keyboard=[])

    if is_admin(message.from_user.id):
        main_kb = reply.create_admin_keyboard()
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ OnlyFans.",
            reply_markup=main_kb,
        )
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø - Lewd Bot.\n\n"
            "–ï—Å–ª–∏ —Ç—ã –∏—â–µ—à—å –Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, —Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –¥–ª—è —Ç–µ–±—è.\n\n"
            "–ú–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å —Ç–µ–±—è —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–µ–π —Å–µ–∫—Å—Ç–µ—Ä–∞(–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞, —á–∞—Ç—Ç–µ—Ä–∞) –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ OnlyFans —Å –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ–º Lewd Media.\n\n"
            "–≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –º–∏—Ä–∞ –∏ –ø–æ–ª—É—á–∞—Ç—å —Ö–æ—Ä–æ—à–∏–π –¥–æ—Ö–æ–¥.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="next_1")]
                ]
            ),
        )


# ----------------- –°—Ç—Ä–∞—à–Ω—ã–π –∫–æ–¥


@dp.callback_query(F.data == "next_1")
async def process_callback_next(callback: types.CallbackQuery):
    message = callback.message

    await message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üü¢ –î–∞–ª–µ–µ", callback_data="next_1")]
            ]
        ),
    )

    await message.answer(
        "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–µ–π —Å–µ–∫—Å—Ç–µ—Ä–∞. –Ø –æ–±—ä—è—Å–Ω—é —Ç–µ–±–µ, —á—Ç–æ —ç—Ç–æ –∑–∞ —Ä–∞–±–æ—Ç–∞ –∏ —á–µ–º –æ–Ω–∞ –æ—Å–æ–±–µ–Ω–Ω–∞—è.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–µ–∫—Å—Ç–∏–Ω–≥?", callback_data="next_2"
                    )
                ]
            ]
        ),
    )


@dp.callback_query(F.data == "next_2")
async def process_callback_next(callback: types.CallbackQuery):
    message = callback.message

    await message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üü¢ –ß—Ç–æ —Ç–∞–∫–æ–µ —Å–µ–∫—Å—Ç–∏–Ω–≥?", callback_data="next_1"
                    )
                ]
            ]
        ),
    )

    await message.answer(
        '–¢–µ—Ä–º–∏–Ω "—Å–µ–∫—Å—Ç–∏–Ω–≥" –ø—Ä–æ–∏–∑–æ—à–µ–ª –æ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ "sexting", –∫–æ—Ç–æ—Ä–æ–µ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç "sex" –∏ "texting". –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–µ–∫—Å—Ç–∏–Ω–≥ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–ª—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n\n'
        "–í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏, —Å–µ–∫—Å—Ç–∏–Ω–≥ —Ä–∞–∑–≤–∏–ª—Å—è –∏ —Å—Ç–∞–ª –≤–∫–ª—é—á–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –Ω–æ –∏ —ç–º–æ–¥–∑–∏, –º–µ–º—ã, –≤–∏–¥–µ–æ –∏ –∏–Ω—Ç–∏–º–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n\n"
        "–†–∞–Ω—å—à–µ, –∫–æ–≥–¥–∞ –ª—é–¥–∏ –æ–±–º–µ–Ω–∏–≤–∞–ª–∏—Å—å –ø–æ–ª–∞—Ä–æ–∏–¥–Ω—ã–º–∏ —Ñ–æ—Ç–æ, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ —Å—á–∏—Ç–∞–ª–æ—Å—å –Ω–µ–æ–±—ã—á–Ω—ã–º. –û–¥–Ω–∞–∫–æ —Å–µ–≥–æ–¥–Ω—è, –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º, –æ–∫–æ–ª–æ 48% –ª—é–¥–µ–π –¥–µ–ª—è—Ç—Å—è –∏–Ω—Ç–∏–º–Ω—ã–º–∏ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Å–µ—Ç–∏, –∏ —ç—Ç–æ –¥–∞–∂–µ —É–∫—Ä–µ–ø–ª—è–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ö—Ç–æ —Ç–∞–∫–æ–π —Å–µ–∫—Å—Ç–µ—Ä?", callback_data="next_3"
                    )
                ]
            ]
        ),
    )


@dp.callback_query(F.data == "next_3")
async def process_callback_next(callback: types.CallbackQuery):
    message = callback.message

    await message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üü¢ –ö—Ç–æ —Ç–∞–∫–æ–π —Å–µ–∫—Å—Ç–µ—Ä?", callback_data="next_1"
                    )
                ]
            ]
        ),
    )

    await message.answer(
        "–°–µ–∫—Å—Ç–µ—Ä ( —Ç–∞–∫–∂–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞, —á–∞—Ç—Ç–µ—Ä ) ‚Äì —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –æ–Ω–ª–∞–π–Ω-—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π. –ï–≥–æ –∑–∞–¥–∞—á–∞ ‚Äì —Å—Ç—Ä–æ–∏—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ñ–∞–Ω–∞—Ç–∞–º–∏ –º–æ–¥–µ–ª–∏, –ø–æ–¥–æ–≥—Ä–µ–≤–∞—è –∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å –∏ –ø—Ä–æ–¥–∞–≤–∞—è –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ —É—Å–ª—É–≥–∏ –º–æ–¥–µ–ª–∏, –ø—Ä–∏ —ç—Ç–æ–º –≤—ã—Å—Ç—É–ø–∞—è –æ—Ç –µ—ë –∏–º–µ–Ω–∏.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–µ–∫—Å—Ç–µ—Ä?", callback_data="next_4"
                    )
                ]
            ]
        ),
    )


@dp.callback_query(F.data == "next_4")
async def process_callback_next(callback: types.CallbackQuery):
    message = callback.message

    await message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üü¢ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–µ–∫—Å—Ç–µ—Ä?", callback_data="next_1"
                    )
                ]
            ]
        ),
    )

    await message.answer(
        "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ: –°–µ–∫—Å—Ç–µ—Ä —Ä–µ–≥—É–ª—è—Ä–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª–∏ –º–æ–¥–µ–ª–µ–π –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö, —Ç–∞–∫–∏—Ö –∫–∞–∫ OnlyFans (OF).\n\n"
        "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂: –û–Ω –æ–±—è–∑–∞–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–≤–æ—Ç—ã –ø—Ä–æ–¥–∞–∂, —É–≤–µ–ª–∏—á–∏–≤–∞—è –¥–æ—Ö–æ–¥—ã –ø—Ä–æ—Ñ–∏–ª—è.\n\n"
        "–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º: –°–µ–∫—Å—Ç–µ—Ä –¥–µ–π—Å—Ç–≤—É–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ—Ä–º–∞–º–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏, —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –≤ –æ–±—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞, –∞ —Ç–∞–∫–∂–µ —Å–ª–µ–¥—É–µ—Ç —É–∫–∞–∑–∞–Ω–∏—è–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ó–∞—á–µ–º –Ω—É–∂–Ω—ã —Å–µ–∫—Å—Ç–µ—Ä—ã?", callback_data="next_5"
                    )
                ]
            ]
        ),
    )


@dp.callback_query(F.data == "next_5")
async def process_callback_next(callback: types.CallbackQuery):
    message = callback.message

    await message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üü¢ –ó–∞—á–µ–º –Ω—É–∂–Ω—ã —Å–µ–∫—Å—Ç–µ—Ä—ã?", callback_data="next_1"
                    )
                ]
            ]
        ),
    )

    await message.answer(
        "–£—Å–∏–ª–µ–Ω–∏–µ –ü—Ä–æ–¥–∞–∂: –°–µ–∫—Å—Ç–µ—Ä—ã –∏–≥—Ä–∞—é—Ç –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –≤ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏ –æ–±—â–µ–Ω–∏—è.\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –í—Ä–µ–º–µ–Ω–µ–º: –û–Ω–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –º–æ–¥–µ–ª—è–º –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –±–µ—Ä—è –Ω–∞ —Å–µ–±—è –∑–∞–¥–∞—á–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–æ–¥–∞–∂.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="C–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Å–µ–∫—Å—Ç–µ—Ä—ã?", callback_data="next_6"
                    )
                ]
            ]
        ),
    )


@dp.callback_query(F.data == "next_6")
async def process_callback_next(callback: types.CallbackQuery):
    message = callback.message

    await message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üü¢ C–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Å–µ–∫—Å—Ç–µ—Ä—ã?", callback_data="next_1"
                    )
                ]
            ]
        ),
    )

    await message.answer(
        "–ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å–µ–∫—Å—Ç–µ—Ä–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂.\n\n"
        "–ö –ø—Ä–∏–º–µ—Ä—É, –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ  –∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Å–µ–∫—Å—Ç–µ—Ä–æ–≤ –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –æ—Ç 100 –¥–æ 500 –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ —Å—Ä–µ–¥–Ω–µ–º –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è", callback_data="next_7")]
            ]
        ),
    )


@dp.callback_query(F.data == "next_7")
async def process_callback_next(callback: types.CallbackQuery):
    message = callback.message

    await message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üü¢ –ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è", callback_data="next_1")]
            ]
        ),
    )

    await message.answer(
        "–ò—Ç–∞–∫, —è —Ä–∞—Å—Å–∫–∞–∑–∞–ª —Ç–µ–±–µ –æ –ø—Ä–æ—Ñ–µ—Å–∏–∏ —Å–µ–∫—Å—Ç–µ—Ä–∞ –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª —Ç–µ–±—è —Å –Ω–∞—à–µ–π —á—É–¥–µ—Å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π. –ù–∞–¥–µ—é—Å—å —Ç–µ–±–µ –±—ã–ª –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –º–æ–π —Ä–∞—Å—Å–∫–∞–∑.\n\n"
        "–¢–µ–ø–µ—Ä—å —è –¥–æ–ª–∂–µ–Ω –∑–∞–¥–∞—Ç—å —Ç–µ–±–µ –≤–æ–ø—Ä–æ—Å. –•–æ—á–µ—à—å –ª–∏ —Ç—ã —Ä–∞–±–æ–∞—Ç—å —Å –Ω–∞–º–∏ –∏ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π —Å–µ–º—å–∏ ?\n\n"
        '–ï—Å–ª–∏ —Ç—ã –≤—ã–±–µ—Ä–µ—à—å "–î–∞", —Ç–æ —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –ø—Ä–æ —É—Å–ª–æ–≤–∏—è –∏ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞—à–µ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞. –ï—Å–ª–∏ –∂–µ —Ç—ã –≤—ã–±–µ—Ä–µ—à—å "–ù–µ—Ç", –Ω–∞ —ç—Ç–æ–º –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è.',
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–î–∞", callback_data="next_yes"),
                    InlineKeyboardButton(text="–ù–µ—Ç", callback_data="next_no"),
                ]
            ]
        ),
    )


@dp.callback_query(F.data == "next_yes")
async def process_callback_next(callback: types.CallbackQuery):
    main_kb = reply.create_main_keyboard()

    message = callback.message

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Å –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ OnlyFans.",
        reply_markup=main_kb,
    )


# ----------------- –ö–æ–Ω–µ—Ü —Å—Ç—Ä–∞—â–Ω–æ–≥–æ –∫–æ–¥–∞


@dp.message(F.text == "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def start_questionnaire(message: types.Message, state: FSMContext):
    questionnaire = load_questionnaire()

    user = message.from_user

    await state.update_data(
        question_index=0,
        answers={},
        user_id=user.id,
        username=user.username,
        full_name=user.full_name,
    )

    if not questionnaire:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∞–Ω–∫–µ—Ç–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    await state.update_data(question_index=0)
    await ask_question(message, state)
    await state.set_state(Questionnaire.answering)


async def ask_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    question_index = data.get("question_index", 0)
    questionnaire = load_questionnaire()

    if question_index < len(questionnaire):
        question = questionnaire[question_index]
        if question["type"] == "button":
            keyboard = await create_keyboard(
                [
                    InlineKeyboardButton(text=option, callback_data=f"answer_{option}")
                    for option in question["options"]
                ]
            )
            await message.answer(question["text"], reply_markup=keyboard)
        else:
            await message.answer(question["text"])
    else:
        await save_and_notify(message, state)


async def save_and_notify(message: types.Message, state: FSMContext):
    data = await state.get_data()

    answers = data.get("answers", {})
    user_id = data.get("user_id")
    username = data.get("username")
    full_name = data.get("full_name")

    user_info = {
        "id": user_id,
        "username": username,
        "full_name": full_name,
    }

    timestamp = datetime.now().isoformat()

    completed_questionnaire = {
        "user_id": user_info["id"],
        "username": user_info["username"],
        "full_name": user_info["full_name"],
        "timestamp": timestamp,
        "answers": answers,
        "status": "pending",
    }

    all_answers = load_answers()
    all_answers.append(completed_questionnaire)
    save_answers(all_answers)

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_message = f"–ù–æ–≤–∞—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞!\n\n"
    admin_message += (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['full_name']} (@{user_info['username']})\n"
    )
    admin_message += f"ID: {user_info['id']}\n"
    admin_message += f"–í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {timestamp}\n\n"
    admin_message += "–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\n"
    for question, answer in answers.items():
        admin_message += f"{question}: {answer}\n"

    for admin_id in ADMINS:
        try:
            await bot.send_message(admin_id, admin_message)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    await state.clear()


# @dp.message(Command("check_applications"))
@dp.message(F.text == "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫")
async def cmd_check_applications(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    all_answers = load_answers()
    pending_answers = [a for a in all_answers if a["status"] == "pending"]

    if not pending_answers:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return

    application = pending_answers[0]
    await send_application_for_review(message, application)


async def send_application_for_review(message: types.Message, application):
    review_text = f"–ê–Ω–∫–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {application['full_name']} (@{application['username']}):\n\n"
    for question, answer in application["answers"].items():
        review_text += f"{question}: {answer}\n"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{application['user_id']}"
                ),
                InlineKeyboardButton(
                    text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{application['user_id']}"
                ),
            ]
        ]
    )

    await message.answer(review_text, reply_markup=keyboard)


@dp.callback_query(F.data.startswith("accept_"))
async def process_accept(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    await process_application_decision(callback, user_id, "accepted")


@dp.callback_query(F.data.startswith("reject_"))
async def process_reject(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    await process_application_decision(callback, user_id, "rejected")


async def process_application_decision(
    callback: types.CallbackQuery, user_id: int, decision: str
):
    all_answers = load_answers()
    for answer in all_answers:
        if answer["user_id"] == user_id and answer["status"] == "pending":
            answer["status"] = decision
            save_answers(all_answers)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if decision == "accepted":
                await bot.send_message(
                    user_id,
                    "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.",
                )
            else:
                await bot.send_message(
                    user_id,
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏.",
                )

            await callback.message.edit_text(f"–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ {decision}.")
            await callback.answer("–†–µ—à–µ–Ω–∏–µ –ø–æ –∞–Ω–∫–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç–æ")

            pending_answers = [a for a in all_answers if a["status"] == "pending"]
            if pending_answers:
                await send_application_for_review(callback.message, pending_answers[0])
            else:
                await callback.message.answer("–í—Å–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.")
            return

    await callback.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")


@dp.callback_query(F.data.starswith("answer_"))
async def process_callback_answer(callback: types.CallbackQuery, state: FSMContext):
    await process_answer(callback.message, state, callback.data.split("_")[1])


@dp.message(Questionnaire.answering)
async def process_text_answer(message: types.Message, state: FSMContext):
    await process_answer(message, state, message.text)


async def process_answer(message, state: FSMContext, answer):
    data = await state.get_data()
    question_index = data.get("question_index", 0)

    answers = data.get("answers", {})
    questionnaire = load_questionnaire()

    answers[questionnaire[question_index]["text"]] = answer

    await state.update_data(
        # {f"answer_{question_index}": answer, "question_index": question_index + 1}
        answers=answers,
        question_index=question_index + 1,
    )
    await ask_question(message, state)


# @dp.message(Command("add_question"))
@dp.message(F.text == "–°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤")
async def cmd_add_question(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:")
    await state.set_state(AdminActions.adding_question)


@dp.message(AdminActions.adding_question)
async def process_question_text(message: types.Message, state: FSMContext):
    await state.update_data(new_question_text=message.text)
    keyboard = await create_keyboard(
        [
            InlineKeyboardButton(text="–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç", callback_data="type_text"),
            InlineKeyboardButton(text="–ö–Ω–æ–ø–∫–∏", callback_data="type_button"),
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞:", reply_markup=keyboard)


@dp.callback_query(AdminActions.adding_question, F.data.startswith("type_"))
async def process_question_type(callback: types.CallbackQuery, state: FSMContext):
    question_type = callback.data.split("_")[1]
    await state.update_data(new_question_type=question_type)

    if question_type == "button":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç–æ–π:")
        await state.set_state(AdminActions.adding_options)
    else:
        data = await state.get_data()
        questionnaire = load_questionnaire()
        questionnaire.append({"text": data["new_question_text"], "type": "text"})
        save_questionnaire(questionnaire)
        await callback.message.answer("–¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–Ω–∫–µ—Ç—É.")
        await state.clear()


@dp.message(AdminActions.adding_options)
async def process_question_options(message: types.Message, state: FSMContext):
    data = await state.get_data()
    questionnaire = load_questionnaire()
    questionnaire.append(
        {
            "text": data["new_question_text"],
            "type": "button",
            "options": [option.strip() for option in message.text.split(",")],
        }
    )
    save_questionnaire(questionnaire)
    await message.answer("–í–æ–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–Ω–∫–µ—Ç—É.")
    await state.clear()


# @dp.message(Command("edit_question"))
@dp.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤")
async def cmd_edit_question(message: types.Message):
    if message.from_user.id not in ADMINS:
        return

    questionnaire = load_questionnaire()
    keyboard = await create_keyboard(
        [
            InlineKeyboardButton(
                text=f"–í–æ–ø—Ä–æ—Å {i+1}: {question['text'][:30]}...",
                callback_data=f"edit_{i}",
            )
            for i, question in enumerate(questionnaire)
        ],
        row_width=1,
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("edit_"))
async def process_edit_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(edit_question_index=int(callback.data.split("_")[1]))
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:")
    await state.set_state(AdminActions.editing_question)


@dp.message(AdminActions.editing_question)
async def process_edit_question_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    questionnaire = load_questionnaire()
    question_index = data["edit_question_index"]
    questionnaire[question_index]["text"] = message.text

    if questionnaire[question_index]["type"] == "button":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç–æ–π:")
        await state.set_state(AdminActions.editing_options)
    else:
        save_questionnaire(questionnaire)
        await message.answer("–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω.")
        await state.clear()


@dp.message(AdminActions.editing_options)
async def process_edit_question_options(message: types.Message, state: FSMContext):
    data = await state.get_data()
    questionnaire = load_questionnaire()
    question_index = data["edit_question_index"]
    questionnaire[question_index]["options"] = [
        option.strip() for option in message.text.split(",")
    ]
    save_questionnaire(questionnaire)
    await message.answer("–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω.")
    await state.clear()


# @dp.message(Command("delete_question"))
@dp.message(F.text == "–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤")
async def cmd_delete_question(message: types.Message):
    if message.from_user.id not in ADMINS:
        return

    questionnaire = load_questionnaire()
    buttons = [
        InlineKeyboardButton(
            text=f"–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å {i+1}: {question['text'][:30]}...",
            callback_data=f"delete_{i}",
        )
        for i, question in enumerate(questionnaire)
    ]
    buttons.append(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data="delete_all"))
    keyboard = await create_keyboard(buttons, row_width=1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("delete_"))
async def process_delete_callback(callback: types.CallbackQuery):
    question_index = callback.data.split("_")[1]
    questionnaire = load_questionnaire()

    if question_index == "all":
        questionnaire.clear()
        await callback.message.answer("–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —É–¥–∞–ª–µ–Ω—ã.")
    else:
        del questionnaire[int(question_index)]
        await callback.message.answer(f"–í–æ–ø—Ä–æ—Å {int(question_index) + 1} —É–¥–∞–ª–µ–Ω.")

    save_questionnaire(questionnaire)


async def main():

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
